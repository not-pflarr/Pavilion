#!/usr/bin/perl
#
#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#  -  Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  -  Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  -  Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

# get node list from moab using the checkjob command
# input: requires one input argument, the jobid of the job in question
# output: list of nodes the job owns

use Sys::Hostname;
#use strict;

$| = 1;

#----- get gazebo config values -------------- #

use Cwd 'abs_path';
use File::Basename;
my $pwd = dirname(abs_path("$0"));
chomp($pwd);
#our $mnd = $gazebo_conf{"Max_Node_Digits"};
our $mnd = 3;


if ($0 =~ /^([ &:#-\@\w.]+)$/) { $0 = $1; }
else { die "Bad data, exiting.\n"; }

my $myjobid = shift; 
if (!defined $myjobid) {
  print "ERROR: no job id entered, exiting!\n";
  exit(1);
}

my $mm = `which checkjob`;
chomp($mm);
my $MDIAG = "$mm $myjobid";
my @uniq = ();
my %seen = ();
my $nodelist = "";
my $ptr;

#   print "begin - nodelist: $nodelist\n";

            my $output = `$MDIAG`;
            if (0 != $?) {
                exit(1);
            }
            my @lines = split "\n",$output;
            for ( my $res=0; $res<@lines; $res++ ) {
               next if (! ( $lines[$res] =~ /Allocated Nodes:/ ));
               $ptr = $res;
               $ptr++;
               last;
            }

            # when we get here process until next blank line
            my $thisline;
            while ($thisline = $lines[$ptr++]) {
               last if ($thisline =~ /^\s+$\n/);

               if ($thisline =~ /[\-*]/) {
                   # handle this type of thing (loa 059-060,047-050,041-042 *16)
                   # OR
                   # handle this type of thing (*16 306,310,198,250,242,265,218,235 ml)
                   $nodelist .= &get_from_type_A($thisline);
               } else {
                   # handle this type of thing
                   # [loa041:16][loa042:16][loa047:16][loa048:16][loa049:16][loa050:16]
                   $nodelist .= &get_from_type_B($thisline);
                }
            }

        my @nodelist = split (/ /, $nodelist); 
        # remove any dups of node names
        foreach my $item (@nodelist) {
          push(@uniq, $item) unless $seen{$item}++;
        }
        my @sl = sort @uniq;
        print "@sl\n";



  sub get_from_type_A {
    my $line = $_[0];
    my $cu;
    my @vals;
    my $range;
    my $nodes;
    my $startnum;
    my $endnum;
    my $diff;

    my $fdl = "%0" . $mnd . "d";

         $line =~ s/\*[0-9]+\s*//g;
         $line =~ s/\]\[/ /g;
         $line =~ s/\[/ /g;
         $line =~ s/\]/ /g;
         $line =~ s/\s*([a-zA-Z]+)\s*//g;

         $cu = $1;
         @vals = split(",", $line);
         foreach $range (@vals) {
           if ( $range =~ /-/) {
             ($startnum,$endnum) = split("-", $range);
             $diff = $endnum - $startnum;
#             my $sn = sprintf("%03d", $startnum);
             my $sn = sprintf("$fdl", $startnum);
             $nodes .= " $cu$sn";
             my $c =1;
             while ( $diff > 0 ) {
               my $n = $startnum + $c;
#               my $fn = sprintf("%03d", $n);
               my $fn = sprintf("$fdl", $n);
               $diff--;
               $c++;
               $nodes .= " $cu$fn";
             }
           } else {
             $nodes .= " $cu$range";
           }
         }
         return "$nodes";
  }

  sub get_from_type_B {
    my $line = $_[0];

               $line =~ s/\]\[/ /g;
               $line =~ s/\[/ /g;
               $line =~ s/\]/ /g;
               $line =~ s/\:[0-9]+//g;
               return $line;
  }


exit


