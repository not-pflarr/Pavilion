#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

#
#     Low level utility to parse a logFile for results.
#     Searches for the test name, the jobid, and PASS/FAIL strings.
#     All pass fail results are proceeded by the string <results>.
#
#     Any occurance of FAIL results returns FAIL, even
#     if PASS also exists. If neither pass nor fail results
#     exist, then UNDEF is returned if the test completed.
#     If the test did not complete, then we will consider the
#     results INCOMPLETE (to messed up to figure out, a.k.a foobar).
#

my $prog;
($prog = $0) =~ s/.*\///;

use Getopt::Std;
use strict;
use File::Basename;

my $jid = "undef";
my $tn;
my $exitCode;
our %opt;
$opt{v} = "";
my @tmp;

# v option with no arg
&getopts('v', \%opt);

my $logFile    = shift;
our $passed     = 0;
our $failed     = 0;
our $learning   = 0;
my $fileSystem = "";
our $end = "";
my $jobNotFinished = 0;
my $noResultFound = 1;

open( LF, "<$logFile" ) or die "$prog: Failed to open $logFile: $!\n";

# post_complete file exists only when job is finished
my $bd = dirname($logFile);
unless ( -e "$bd/post_complete" ) {
  $jobNotFinished = 1;
}

my (
    $dev,  $ino,   $mode,  $nlink, $uid,     $gid, $rdev,
    $size, $atime, $mtime, $ctime, $blksize, $blick
) = stat($logFile);

$_ = localtime($mtime);
my ( $wday, $mon, $day, $time, $year ) =
  /(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/;
my $dt = "$mon-$day-$year $time";

if ($opt{v}) { print "$prog: examining log: $logFile \n"; }

my $resultsStr = "";
my $failedResultsStr = "";
while (<LF>) {

    if (/^<testName>/) {
        @tmp = split ' ', $_;
        $tn = $tmp[1];
        next;
    }

    if (/^<JobID> (\d+)/) {
        $jid = $1;
        next;
    }

    if( /^<end> (\S+)/ ) {
       $end = $1;
       next;
    }

    # except both result and results
    if (/<result\w{0,1}>\s*(.+)/){
        $resultsStr = $1;
        chomp($resultsStr);
        if ($opt{v}) { print " --> $prog: found -> $_\n"; }
        if ($resultsStr =~ /LEARN/i) {
            print "  Matched =>(L)\n";
            $learning = 1;
            $noResultFound = 0;
            next;
        }
        if ($resultsStr =~ /PASS/i) {
            print "  Matched =>(P), $resultsStr\n";
            $passed = 1;
            $noResultFound = 0;
            next;
        }
        if ($resultsStr =~ /FAIL/i) {
            $failedResultsStr = $resultsStr;
            print "  Matched =>(F), $failedResultsStr\n";
            $failed = 1;
            $noResultFound = 0;
        }
        next;
    }
} 

#  end of file parsing

if ( $noResultFound ) {
  # got here and not pass, fail, or even learning, so decide
  # if it just didn't start or finish, or did finish
  # but did not contain any explicit results.

  # maybe the job itself died for some reason
    if ( $jobNotFinished ) {
      # no post complete file, job died or maybe still running
        print "  No Match =>(I), INCOMPLETE, job did not finish\n";
    } else {
        # it must have ran, but no explicit results, so default to undefined 
        print "  No Match =>(U), UNKNOWN, no explicit pass/fail results in output\n";
    }

    print "  $dt $tn:$jid :: RESULT=UNDEFINED\n";
} else {

  # it's a failing test if any result shows a failure,
  # otherwise it must have a pass to indicate pass

  if ( $failed )  {
    print "  $dt $tn:$jid :: RESULT=FAILED\n";
  } elsif ( $passed ) {
    print "  $dt $tn:$jid :: RESULT=PASSED\n";
  } elsif ( $learning ) {
    print "  $dt $tn:$jid :: RESULT=LEARNING\n";
  }

}


close(LF);

exit;
