#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

# script to create a list of all test directories in a given date range


$| = 1;    # disable buffered I/O
my $prog;
( $prog = $0 ) =~ s/.*\///;

use POSIX;

my (
    $i,       $d,        $td,       $sd,   $ed,         $startdate,
    $enddate, $hr,       $min,      $sec,  $day,        $mo,
    $yr,      $basedir,  $year, $firstvalid, $test,
    $dir,     $testname, $machname, @grps, $st, $et
);

use Cwd 'abs_path';
use File::Basename;
$pwd = dirname( abs_path("$0") );
chomp($pwd);

my $PH = "$ENV{'PVINSTALL'}/PAV";

use Time::Local;
use Getopt::Std;
our %opts;
$opts{g} = "gzshared";
$opts{s} = "";
$opts{S} = "";
$opts{e} = "";
$opts{E} = "";
$opts{d} = "";
$opts{t} = "";
$opts{j} = "";
$opts{m} = "";
getopts( "g:j:t:S:E:s:e:m:d:hva", \%opts );


$basedir = $opts{d};    # base directory in which all data resides

print "Searching $basedir\n" if $opts{v};

use strict;

if ( $opts{h} ) {
    $dir = <<EOF;
This script takes in a range of dates and prints all test run directories found
in that range.

Usage:
	$0 -d <basepath> [-s YYYY-MM-DD [HH:MM:SS]] [-m <machine Name>] [-e YYYY-MM-DD [HH:MM:SS]] [-v] [-t <test name>] [-j <jobid>]
where
	The startdate and enddate specify a range of dates to search.
          Optional time component of dates defaults to 00:00:00 to start and 23:59:59 to end.
          If no end date is entered the end date is today.
	  If no start date is is entered it will default to 15 days prior to the today.
        -d directory where to search for test results.
        -t name of test to filter on 
        -j specific job id to filter on 
        -m name of the machine to filter on  
        -a sets start date to 01/01/2009 to get all data
        -v verbose information 
EOF
    print "$dir\n";
    exit;
}

open STDERR, "> /dev/null" or die "$prog: can't redirect stderr";

# set up to use alternate base directory if user provides one
if ( "$opts{d}" ne "" ) {
    $basedir = "$opts{d}";
    $basedir =~ s/\//\\\//g;
}

# see if a test name is entered
$testname = "*";
if ( $opts{t} ) {
    $testname = $opts{t};
    chomp $testname;
    $testname = $testname . "*";
}

# see if a segment/machine name is entered
$machname = "*";
if ( $opts{m} ) {
    $machname = $opts{m};
}

# get start and end dates desired
if  ( $opts{e} eq "" ) {
    $enddate = `date -I`;
} else {
    $enddate = $opts{e};
}
chomp($enddate);

my ($cal, $time);
my ($hr, $min, $sec);
$hr = 23;
$min = 59;
$sec = 59;
$cal = "";
$time ="";

( $cal, $time ) = split / /, $enddate;
( $yr, $mo, $day ) = split '-', $cal;
if ( $time ne "" ) {
 ($hr, $min, $sec) = split /:/, $time;
 $et = $hr . $min . $sec;
}
$ed = timelocal( $sec, $min, $hr, $day, $mo - 1, $yr - 1900 );

if ( $opts{s} eq "" ) {
    $startdate = `date -I -d "15 days ago $enddate"`;
} else {
    $startdate = "$opts{s}";
}
if ( $opts{a} ) {
   $startdate = "2009-01-01";
}
chomp($startdate);

($hr, $min, $sec) = 0;
$cal = "";
$time ="";
( $cal, $time ) = split / /, $startdate;
( $yr, $mo, $day ) = split '-', $cal;
if ( $time ne "" ) {
 ($hr, $min, $sec) = split /:/, $time;
}
$sd = timelocal( $sec, $min, $hr, $day, $mo - 1, $yr - 1900 );

if ( $opts{v} ) { 
  print "start date - $startdate, sd - $sd\n";
  print "end date - $enddate, ed - $ed\n";
#print "test name - $testname\n";
#print "machine name - $machname\n";
}


if ( $sd > $ed ) {
    print "$prog: ERROR, start date later than end date!\n";
    exit;
}

# build the specific dirs to look into
my $dirs;
my $g;
$i = 0;

# get data for only a specific group if so requested
if ( "$opts{g}" ne "" ) {
    @grps = ( "$opts{g}" );
}
else {
    @grps = `ls $basedir | xargs`;
}
foreach $g (@grps) {
    chomp $g;
    next unless ( $g =~ /^gz/ );  # don't care about groups other than gazebo groups
    # if it's gzshared just dive in, if not, then we have some access checking to 
    # do first. Unix permission would take care of it, but why not stop it here.
    unless ( "$g" eq "gzshared" ) {
        next unless (`$PH/scripts/listgrp -u $ENV{'USER'} -g $g`);
    }

    # create a list of all dirs to look into
    # starting at startdate ending today
    while ( $i < 1700 ) {	# include roughly 5 years back
        $dirs .=
            "$g" . "/" . "$yr" . "/" . "$yr" . "-" . "$mo" . "/" . "$yr" . "-"
          . "$mo" . "-" . "$day ";
        if ( $day > 30 ) {
            $day = 1;
            $mo  = $mo + 1;
            if ( $mo > 12 ) {
                $mo = 1;
                $yr = $yr + 1;
            }
        }
        else { $day += 1 }
        $i += 1;
        if ( length($day) == 1 ) { $day = "0" . "$day" }
        if ( length($mo) == 1 )  { $mo  = "0" . "$mo" }
        # strip off any time from the enddate
        $enddate =~ /^(\S+)/;
        if ( $dirs =~ /$1/ ) { last; }
    }
}

my @dirlist = split( ' ', $dirs );
#if ( $opts{v} ) { print "date search list: @dirlist\n"; }

my $res;
my $tmp;
foreach $d (@dirlist) {
    my $cmd = "ls -1 -d $basedir/$d/$machname/$testname";
    $res .= `$cmd`;
}


if ( $opts{v} ) { print "result directory candidates:\n$res\n"; }

my $res2;
my @tmp;
my $entry;
my $cmd;
for (split /^/, $res) {
    my $d = $_;
    chomp $d;
    if ( $opts{v} ) { print "Explore directory $d\n"; }
    if ( $opts{j} ne "" ) {
       my $jid = "_" . $opts{j} . "_";
       $cmd = "/bin/ls $d | grep $jid | xargs";
    } else {
       $cmd = "/bin/ls $d | xargs";
    }
    $tmp = `$cmd`;

    my @tdirs = split( ' ', $tmp );
    foreach $entry (@tdirs) {
      if ( $opts{v} ) { print "  checking - $entry\n"; }

      my ($junk, $dateTime) = split /\./, $entry;
      my ($cal, $entryTime) = split /T/, $dateTime;
      my ($yr, $mo, $day) = split /-/, $cal;
      my ($hr, $min, $sec, $msec) = split /:/, $entryTime;
      #print "$hr, $min, $sec, $msec \n";
      if (length $sec && $sec < 60 ) {
        my $testTime = timelocal( $sec, $min, $hr, $day, $mo - 1, $yr - 1900 );
        #print "$testTime\n";
        if (( $testTime >= $sd) && ( $testTime <= $ed ) ) {
          if ( $opts{v} ) { print "  add $d/$entry to final results\n"; }
          print "$d/$entry\n";
        }
      } else {
        if ( $opts{v} ) { print "  skipping $entry, NOT a valid result directory.\n"; }
      }
    }

}





{
    {
      #chomp $entry;
      # at this point all the test specific directories are collected
      # put in a couple of checks to make sure we don't have bogus dirs
      #unless (-d "$_/$entry") {next;}
      #if ( $dateTime eq "" ) {next;}
    }
}

exit;
