#!/usr/bin/env python

"""
 Show both a plot and table view of the trend data listed in the csv file
 passed as a single argument.

"""

import sys
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
import datetime
import matplotlib.dates as mdates
import numpy as np
from tabulate import tabulate
from optparse import OptionParser
import re

xDatesTimes = []
test_names = []


def date_time_match(input_list, s_date=None, s_time="00:00:00", e_date=None, e_time="23:59:59"):
    """
    Construct a new shorter list with only desired date ranges
    """
    if s_date:
        desired_starting_date = datetime.datetime.strptime(s_date, "%Y-%m-%d")
    else:
        today = datetime.datetime.now()
        fifteen_days = datetime.timedelta(days=15)
        desired_starting_date = today - fifteen_days

    print "look for records after -> " + str(desired_starting_date)

    if e_date:
        ending_date = datetime.datetime.strptime(e_date, "%Y-%m-%d")
    else:
        ending_date = datetime.datetime.now()

    print "look for records before -> " + str(ending_date)

    # find index of first date match, find index of last date match, then slice from input
    s_index = 0
    e_index = 0
    on_line_number = 0

    for this_line in input_list:
        on_line_number += 1
        my_fields = this_line.split(",")
        try:
            record_start_date = datetime.datetime.strptime(my_fields[0], "%m-%d-%Y")
            record_end_date = datetime.datetime.strptime(my_fields[2], "%m-%d-%Y")
            # set the start index number at the first encounter only
            if not s_index and record_start_date >= desired_starting_date:
                s_index = on_line_number-1
            if record_end_date <= ending_date:
                e_index = on_line_number
        except ValueError:
            # print "skip line -> " + this_line
            pass

    # print "start new list from old list line -> " + str(s_index)
    # print "end new list from old list line -> " + str(e_index)
    new_list = input_list[s_index:e_index]
    return new_list


def construct_y_axis(d):

    # print "process -> "
    # print d

    for k, v in d.iteritems():
        if isinstance(v, dict):
            construct_y_axis(v)
        else:
            # print "{0} : {1}".format(k, v)
            yValMean.setdefault(k, []).append(sum(v)/float(len(v)))
            yValMax.setdefault(k, []).append(max(v))
            yValMin.setdefault(k, []).append(min(v))


def prepare_plot(test_name, date_arr, name, min_arr, max_arr, mean_arr):

    # print "    {0}:\n\t    {1}\n\tmin {2}\n\tmean{3}\n\tmax {4}".format(name, xDates, min_arr, mean_arr, max_arr)
    # print "Date array -> " + str(date_arr)
    plt.plot_date(date_arr, max_arr, marker='o', color='r', linestyle='-', label='Max')
    plt.plot_date(date_arr, mean_arr, marker='x', color='b', linestyle='-', label='Mean')
    plt.plot_date(date_arr, min_arr, marker='*', color='g', linestyle='-', label='Min')

    # decrease the font size of the line legend and place it low center
    font_p = FontProperties()
    font_p.set_size = 'x-small'
    plt.legend(loc=8, prop=font_p)

    # try to generate a plot with spaces to left and right of start and end dates
    # so that first and last values are not on borders.
    xticks, xticklabels = plt.xticks()
    xmin = (3*xticks[0] - xticks[1])/2.
    xmax = (3*xticks[-1] - xticks[-2])/2.
    plt.xlim(xmin, xmax)

    # beautify the x axis
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m-%d-%Y'))
    # plt.gca().xaxis.set_major_locator(mdates.DayLocator())
    plt.gcf().autofmt_xdate()

    # label the axis's
    plt.suptitle(test_name, fontsize=14)
    plt.title(name, fontsize=12)
    plt.ylabel('rates')
    plt.xlabel('date')

    plt.grid(True)
    # plt.draw()  # Draws, but does not block


def print_table(name, my_units, date_arr, min_arr, max_arr, mean_arr):

    """
    Print out ascii table of each test's trend data  
    """

    print "\n  %s (%s)" % (name,my_units)

    hdr = ['date', 'min', 'mean', 'max'] 
    # mean = [ 1.5, 2.5, 3.5, 4.1, 4.5 ] 
    # max = [ 4.5, 7.5, 1.5, 4.1, 7.6 ] 
    # min = [ 1.0, 1.1, 1.2, 1.3 , 1.4]
    # data needs to be a list of strings
    smin = [str(f) for f in min_arr]
    smean = [str(f) for f in mean_arr]
    smax = [str(f) for f in max_arr]
    # make it 4 columns by as many rows as there are dates of data
    # where column 0 is the date
    data = np.concatenate([date_arr, smin, smean, smax]).reshape(4,len(date_arr)).T

    # Or, if I want to create of transposed list of tuples use zip
    # data = np.concatenate([dates,smin,smean,smax]).reshape(4,len(dates))
    # nd = zip(*data)
    # Or, to make it a transposed 2d array of lists use
    # nd = [list(i) for i in zip(*theArray)]
    # print nd

    # print tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age'])
    print tabulate(data, headers=hdr, tablefmt='orgtbl')


# --- main() -----

# at least one input arg in the first position, the name of the file to analyze
parser = OptionParser()
parser.add_option("-S", type="string", dest="start_time")
parser.add_option("-s", type="string", dest="start_date")
parser.add_option("-E", type="string", dest="end_time")
parser.add_option("-e", type="string", dest="end_date")
parser.add_option("-t", type="string", dest="test_name")
(options, args) = parser.parse_args()

try:  
    res_f = str(sys.argv[1])
    print ("  result file ->  %s" % res_f)
    readFile = open(res_f, 'r')
    input_list = readFile.read().split('\n')
    readFile.close()
    print "  file size  " + str(sys.getsizeof(input_list)) + " bytes"
except IndexError, e:
    print "No results file provided, exiting!"
    exit()

modified_list = date_time_match(input_list, options.start_date, options.start_time, options.end_date, options.end_time)
del input_list[:]

# simply loop over each line to find unique test names
for li in modified_list:
    if li:
        fields = li.split(",")
        # don't want the csv header line
        if 'TestName' in fields[4]:
            continue
        # If user supplied the "-t" only look for that test name
        if options.test_name:
            if options.test_name not in fields[4]:
                continue
        this_test_name = fields[4] + "." + fields[7] + "x" + fields[8] + "(" + fields[9] + ")"
        if this_test_name not in test_names:
                # print "adding %s to test list" % this_test_name
                test_names.append(this_test_name)

print "Test names include: "
if test_names:
    for test_name in test_names:
        print test_name
else:
    print "No test names that match your input request found"

# create dictionary of dictionaries of lists of trend data values

for test in test_names:

    test_dict = {}
    xDates = []
    units = {} 
    yValMean = dict()
    yValMin = dict()
    yValMax = dict()

    for each_line in modified_list:
        # ignore blank lines
        if not each_line:
            break 
        # print "eval -> %s " %  each_line
        # disregard null lines and grab data for this specific test name
        fields = each_line.split(",")
        full_test_name = fields[4] + "." + fields[7] + "x" + fields[8] + "(" + fields[9] + ")"
        # print "does %s match %s" % (test,full_test_name)
        if test in full_test_name:

            td_val = fields[12].strip()
            # need to check right away if td_value is a float, if not skip this line.
            try:
                new_val = float(td_val)
            except ValueError, e:
                # print "Can't do it, not a float: %s" % e
                continue
            td_name = str(fields[11].strip())
            td_units = fields[13].strip()

            # the date is the first column
            day = str(fields[0].strip())
            t = str(fields[1].strip())
            if day not in xDates:
                xDates.append(day)
            dt = str(day) + " " + str(t)
            if dt not in xDatesTimes:
                xDatesTimes.append(dt)

            # tricky little way to add values to the inner list if any keys are not yet defined
            test_dict.setdefault(day, {}).setdefault(td_name, []).append(new_val)
            units[td_name] = td_units

    print "\n -----------------"
    print test + " :"

    # convert date strings to Matplotlib dates
    dates = [datetime.datetime.strptime(t, "%m-%d-%Y").date() for t in xDates]

    # reduce the values from each day to get the Y axis
    for day in sorted(test_dict.keys()):
        construct_y_axis(test_dict[day])

    # plot all the trend data for this test name
    for td_name in sorted(yValMin.keys()):
        print_table(td_name, units[td_name], xDates, yValMin[td_name], yValMax[td_name], yValMean[td_name])
        prepare_plot(test, dates, td_name, yValMin[td_name], yValMax[td_name], yValMean[td_name])
        # these two lines below appear to be either/or but not both??
        plt.show()
        # fig = plt.gcf()
        new_name = re.sub(r'\(', '-', test)
        new_name = re.sub(r'\)', '', new_name)
        new_name = re.sub(r' ', '', new_name)
        new_name = re.sub(r'\"', '', new_name)
        figure_name = "/tmp/" + new_name + "-" + td_name + ".png"
        # fig.savefig(figure_name)



