#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################


# script which prints a quick summary of the Pavilion test result logs
# 
# 08/2014, adapted from Gazebo results script, Craig Idler
#
#

use lib "$ENV{'PVINSTALL'}/PAV/scripts";

use File::Basename;
use ReadBackwards;
use Sys::Hostname;
our $host = hostname;

my $PH = "$ENV{'PVINSTALL'}/PAV";

use Getopt::Std;
our %opt;
$opt{t} = "";
$opt{u} = "";
$opt{l} = "";
$opt{s} = "";
$opt{e} = "";
$opt{S} = "";
$opt{E} = "";
$opt{g} = "";
$opt{x} = "";
# setup arguments as switches or ones that require strings  
getopts( "g:t:u:l:s:S:e:E:apfhivxT", \%opt);

my $jobsRunning = "";
my $activeJobs = "";
my $pes;
my $params;
my $tn;
my $my_cus;
my ( $end, $start );
my ($earliestStart, $latestEnd) = ""; 
our @lfs;
our $f;
our $lf;
our @tf;
our $res_dir;
my $max_name_len = 0;
my $me = `whoami`;
chomp $me;

# print usage if h option set
if ($opt{h}) { usage(); exit; }

my $today = `date '+%Y-%m-%d'`;
chomp $today;
my $d;

my $endTime, $endDate;
my $startTime, $startDate;

if ( $opt{E} ne "" ) {
  $endTime = $opt{E};
} else {
  $endTime = "23:59:59";
}

if ( $opt{e} ne "" ) {
  $endDate = $opt{e};
} else {
  $endDate = $today;
}

chomp($endDate);
$end = $endDate . " " . $endTime;
chomp($end);

if ( $opt{S} ne "" ) {
  $startTime = $opt{S};
} else {
  $startTime = "00:00:00";
}

if ( $opt{s} ne "" ) {
  $startDate = $opt{s};
} else {
  if ( $opt{S} ne "" ) {
    $startDate = $today;
  } else {
    $startDate = `$PH/scripts/defaultDaysAgo.py`; 
  }
}

chomp($startDate);
$start = $startDate . " " . $startTime;
chomp($start);

#get the job id's of the all my jobs in progress
#$jobsRunning = `$GH/gzjobs | grep -i $me | grep running | awk '{ print \$1 }' | xargs `;
#$activeJobs = `$GH/gzjobs | grep -i $me | awk '{ print \$1 }' | xargs `;
#$activeJobs = `$PH/pvjobs | grep -e "^[0-9]" | awk '{ print \$1 }' | xargs `;

# Only call this if on a Moab based system
my $cmd_exists = `which mdiag`;
if ($cmd_exists =~ m/mdiag/) {
  $activeJobs = `$PH/pvjobs | grep -i $me | awk '{ print \$1 }' | xargs `;
}

print "\n  --------------------------------------------------------------------  \n\n";
print "  *** Job Summary (results root directory -> $opt{l}) ***\n";
print "  From: $start through $end \n";
unless ( $opt{a} || $opt{T}) {
  if ( $opt{x} ) {
    print "    Output format: testName.numNodesXnumCores(test arguments) - results, [min, mean, max run time in secs]\n";
  } else {
    print "    Output format: testName.numNodesXnumCores(test arguments) - results, [Avg. run time in secs]\n";
  }
}

print "\n";

# determine where to search 
my $cmd;
# specify alternate dirs to search for logs.
# will only work for the parent of directories with the form
# <testName>_<Id>_<SegName>.date
#print "    results root directory -> $opt{l}\n\n";
$res_dir = $opt{l};
$cmd = "find $opt{l} -type d -maxdepth 1 -mindepth 1";

# select the group directories to look through  
my $tg;
my @grps = ();

# support multiple groups in result directory
if ( "$opt{g}" ne "") {
  push(@grps, $opt{g});
} else {
  $tg = `$PH/scripts/listgrp -u $me`; 
  chomp $tg;
  @grps = split(/ /, $tg);
}


my $group;
foreach $group (@grps) {
  unless ( $opt{a} ) {
    print "  group: $group" ;
  }
  if ($opt{l}) {
    $cmd = qq($PH/scripts/find_test_dirs -d $res_dir -s "$start" -e "$end" -g $group);
  } else {
    $cmd = qq($PH/scripts/find_test_dirs -s "$start" -e "$end" -g $group);
  }

#print "\ndebug: my command is $cmd\n";
  my $totalTests       = 0;
  my $totalTestsPassed = 0;
  my $totalTestsFailed = 0;
  my $totalTestsUndef = 0;
  my $totalTestsfoobar = 0;
  my $thisTestPassed = ();
  my %totalThisTest = ();
  our %passed = ();
  our %failed = ();
  my %undef = ();
  my %foobar = ();
  our %failedTests = ();
  our %passedTests = ();
  my %undefTests = ();
  my %foobarTests = ();
  my %seen = ();
  our %totalRealtime = ();
  our %maxJobtime = ();
  our %minJobtime = ();
  our $CumTotalTime = 0;
  our $totalNodeHrs;
  my @my_cus = ();
  our %treal = ();

  # a place to save list of all log directories with no log file
  my $noLog = "$res_dir/noLog.txt";
  open( NL, ">$noLog" )
        or die("Unable to open tracking file $noLog for writing: $!\n");

  my @fields;
  my $ld;
  my $log_directory;
  @lfs = ();
  my $cres = `$cmd`;
  @results = split /^/m, $cres;

  foreach (@results) {
    chomp;
    $params = "";
    my $nnodes;

    print "\n\nNEW SEARCH  \n" if ($opt{v});
    print " looking in: $_\n" if ($opt{v});

    # skip null strings
    next if ( $_ eq "" );
    $log_directory = $_;

    # all the test info is after the directory part, so lop it off
    @fields = split /\//, $_;
    $ld = pop(@fields);

    # skip log if name starts with a number
    next if ( $ld =~ /^\d/ );

    if ($opt{t} ne "") {
        # skip this log if user looking for a different test
        if ( $ld !~ /$opt{t}/i ) {
          print " skipping, not interested in this test name\n" if ($opt{v});
	  next;
        }
    }

    if ($opt{u} ne "" ) {
        # skip this log if user looking for a different target segment 
        if ( $ld !~ /__$opt{u}/ ) {
          print " skipping, not interested in this segment name\n" if ($opt{v});
	  next;
	}
    }

    #get name, cu, pid, and time of this test run
    my @tmpstr = split( /\./, $ld );
    my $arrlen = @tmpstr;
    if ( $arrlen != 2 ) {
        next;
    }

    # break out test information parts
    my $testCU = "";
    my $testName = "";
    my $runScript = "";
    my $testpid = "";
    my $testTime = $tmpstr[1];
    my @tmpstr1  = split( /__/, $tmpstr[0] );
    $arrlen = @tmpstr1;

    # HW-raw__iPassed__109958__ml-fey1.  This number is NOT the  moab jobid in Pavililion!
    # make sure all four parts are present (testname, run script, pid, segment name)
    if ( $arrlen == 4 ) {
      my @fields = split /-/, $tmpstr1[3];
      $testCU = $fields[0];
      $testName = $tmpstr1[0];
      $testpid  = $tmpstr1[2];
    } else {
        print "warning, invalid test info -> $tmpstr[0], skipping \n";
        next;
    }

    @lfs = glob("$_/*.log");
    $lf = "";
    # get real log file in case some other log file was created
    if (@lfs) {
      foreach $f (@lfs) {
        my $tlf = basename($f); 
        if ($tlf =~ /^$testName/) {
          $lf = $f; 
          print " log file is : $lf\n" if ($opt{v});
        }
      }
    } else {
      # save these around for the job analyzer
      print " NO LOG FILE EXISTS for $_\n"if ($opt{v});
      print NL "$_\n";
    }

    # get the jobid 
    $testjid = "";
    if ( -r "$lf" ) {
        $testjid = `grep -m 1 "<JobID>" '$lf' | awk '{ print \$2 }'`;
        chomp($testjid);
        print "  --> job id : $testjid" if ($opt{v});
    }

    # skip if this test is currently running
    #print "active job(s) - $activeJobs\n";
    #print "testjid - $testjid\n";

    #print "my active job(s) - $activeJobs\n" if ($opt{v});
    if (($testjid) && ( $activeJobs =~ m/$testjid/ ))  {
        print "\nskipping active job $testjid\n" if ($opt{v});
        next;
    }

    @tf = glob("$_/trend*");

    if ( $opt{T} ) {
      unless ( -r $tf[0] ) {
	next;
      }
      print "checking: $tf[0]" if ($opt{v});
    } else {
      if ( $lf ne "") {
        print "\n checking: $lf \n" if ($opt{v});
      } 
    }
 
    # get number of pe's this test ran on
    $pes = "";
    if ( -r "$lf" ) {
        $pes = `grep -m 1 "<npes>" '$lf' | awk '{ print \$2 }'`;
        chomp($pes);
    }


    if ( -r "$lf" ) {
        # get specific test parameters this test ran with
        $params = "";
        $params = `grep -m 1 "<params>" $lf | awk -F"> "  '{ print \$2 }'`;
        chomp($params);

        # get number of nodes that were used
        my $tmp;
        my @nnodes = ();
        $tmp = `grep -m 1 "<nodes> " $lf | awk -F"> "  '{ print \$2 }'`;
        chomp($tmp);
        @nnodes = split(" ", $tmp);
        $nnodes = @nnodes;

        if ( $opt{a} ) {
          # get earliest start time of any test 
          my $thisStart = "";
          $thisStart = `grep -m 1 "<start>" $lf | awk -F"> "  '{ print \$2 }'`;
          chomp($thisStart);
          if ($thisStart ne "") {
            if ($earliestStart eq "" ) {
                $earliestStart = $thisStart;
            } else {
              if ($thisStart lt $earliestStart) {
                $earliestStart = $thisStart;
                #print "my earliest start is $thisStart\n";
              }  
            }
          }

          # get latest end time of any test 
          my $thisEnd = "";
          $thisEnd = `grep -m 1 "<end>" $lf | awk -F"> "  '{ print \$2 }'`;
          chomp($thisEnd);
          if ($latestEnd  eq "" ) {
            $latestEnd = $thisEnd;
          } else {
            if ($thisEnd gt $latestEnd) {
              $latestEnd = $thisEnd;
            }
          }

        }
#my $tT = `tail -5 $lf | grep real | awk '{ print \$2 }'`;
#chomp $tT;
#my $nnn = $pes/16;
#   print " adding in $nnn * $tT secs \n";
#   $totalNodeHrs = $totalNodeHrs + (( $nnn * $tT) / 3600);
#   print " totalNodeHrs: $totalNodeHrs\n";
    }


    # build the unique test name to hash on
    $tn = $testName . "." . $nnodes . "x" . $pes . "(" . $params . ")" ;
    my $tn_len = length($tn);
    # keep track of maximum name length for formatting purposes
    if ( $max_name_len < $tn_len ) {
      $max_name_len = $tn_len;
    }


    # handle special Trend Data here
    my $td;
    if ($opt{T}) {
      my $cmd2 = "cat $tf[0]";
      foreach $td (`$cmd2`) {
        chomp $td;
        print "\n\t$tn jid($testjid) $testTime $td";
      }
      print "\n"; 
      next;
    } else {
      # examine the log file for passed or fail
      $cmd = "$PH/scripts/chklg $lf ";
      $totalTests++;
      $totalThisTest{$tn}{$testCU}++;

      #create a list of all the CU's being checked
      $seen{$testCU}++;
      if ( $seen{$testCU} == 1 ) {
          push( @my_cus, $testCU )
      }

    #  don't even check for status if the log file does not exist
    #  the test has been counted, but the results would be bogus anyway
    my $status;

    open(RF, ">$log_directory/RESULTS");
    if ( -e $lf ) {
          # run the chklg command
          $status = qx/$cmd/;
        print "  --> $status " if ($opt{v});
        if ( $status =~ /=PASS/ ) {
            $totalTestsPassed++;
            $passed{$tn}{$testCU}++;

            # leave some cruft around which may speed later analysis runs
            print RF $status;

            # find real cpu time to be used for averages 
            #$treal{$tn}{$testCU} = `tac $lf | grep -m 1 ^real | awk '{ print \$2 }'`;
            # dang, tac's not everywhere, so let's use this...
            my $fh = ReadBackwards->new($lf) or die "can't read file: $!\n";
            while ( defined($line = $fh->readline) ) {
              if ( $line =~ /^real\s+(\d+\.\d+)/) {
                chomp $1;
                $treal{$tn}{$testCU} = $1;
                #print "matched $1\n";
                last;
              }
            }

            chomp($treal{$tn}{$testCU});

            print " --> $tn: $treal{$tn}{$testCU} secs of real time used\n" if ($opt{v});
            if (exists $totalRealtime{$tn}{$testCU}) { 
              $totalRealtime{$tn}{$testCU} = $totalRealtime{$tn}{$testCU} + $treal{$tn}{$testCU};
              if ($maxJobtime{$tn}{$testCU} < $treal{$tn}{$testCU}) {
                  $maxJobtime{$tn}{$testCU} = $treal{$tn}{$testCU};
              }
              if ($minJobtime{$tn}{$testCU} > $treal{$tn}{$testCU}) {
                  $minJobtime{$tn}{$testCU} = $treal{$tn}{$testCU};
              }
#print "\nDebug1: total time so far - $totalRealtime{$tn}{$testCU}, num tests passed - $passed{$tn}{$testCU}\n";
            } else {
              $totalRealtime{$tn}{$testCU} = $treal{$tn}{$testCU};
              $maxJobtime{$tn}{$testCU} = $treal{$tn}{$testCU};
              $minJobtime{$tn}{$testCU} = $treal{$tn}{$testCU};
            }
            push( @{ $passedTests{$tn}{$testCU} }, "$_" ) if ($opt{p});
        }
        elsif ( $status =~ /=FAIL/ ) {    # test failed, save the failing log directory name
            # stored values are references to arrays
            $totalTestsFailed++;
            push( @{ $failedTests{$tn}{$testCU} }, "$_" );
            $failed{$tn}{$testCU}++;

            # leave some cruft around which may speed later analysis runs
            print RF $status;
        }
        elsif ( $status =~ /=UNDEF/ ){    # test finished but no pass or fail indication 
            push( @{ $undefTests{$tn}{$testCU} }, "$_" );
            $totalTestsUndef++;
            $undef{$tn}{$testCU}++;

            # leave some cruft around which may speed later analysis runs
            print RF $status;

            # find real cpu time to be used for averages
            $treal{$tn}{$testCU} = `tail -5 $lf | grep real | awk '{ print \$2 }'`;
            chomp($treal{$tn}{$testCU});
            if (exists $totalRealtime{$tn}{$testCU}) {
              $totalRealtime{$tn}{$testCU} = $totalRealtime{$tn}{$testCU} + $treal{$tn}{$testCU};
            } else {
              $totalRealtime{$tn}{$testCU} = $treal{$tn}{$testCU};
            }
        }
        elsif ( $status =~ /=LEARN/ ){    # test finished but in learning mode 
            push( @{ $undefTests{$tn}{$testCU} }, "$_" );
            $totalTestsUndef++;
            $undef{$tn}{$testCU}++;

            # leave some cruft around which may speed later analysis runs
            print RF $status;

            # find real cpu time to be used for averages
            $treal{$tn}{$testCU} = `tail -5 $lf | grep real | awk '{ print \$2 }'`;
            chomp($treal{$tn}{$testCU});
            if (exists $totalRealtime{$tn}{$testCU}) {
              $totalRealtime{$tn}{$testCU} = $totalRealtime{$tn}{$testCU} + $treal{$tn}{$testCU};
            } else {
              $totalRealtime{$tn}{$testCU} = $treal{$tn}{$testCU};
            }
        }
        else {    # test data INCOMPLETE 
            push( @{ $foobarTests{$tn}{$testCU} }, "$_" );
            $totalTestsfoobar++;
            $foobar{$tn}{$testCU}++;

            # leave some cruft around which may speed later analysis runs
            print RF $status;
        }
    } else {  # no test output log, save the failing log directory name
        push( @{ $foobarTests{$tn}{$testCU} }, "$_" );
        $totalTestsfoobar++;
        $foobar{$tn}{$testCU}++;

        # since chklg not called fill in the RESULTS
        $status = " $testName:$testjid => INCOMPLETE, no output log exists\n";

        # leave some cruft around which may speed later analysis runs
        print RF $status;
    }
    close(RF);

    }
  }


  my $format_str;
  $max_name_len = $max_name_len + 2;

  my @sorted_cus = sort(@my_cus);
  my ($cu, $kt, $val);
  foreach $cu (@sorted_cus) {
    if ("$opt{c}" ne "") {
        next if ( $cu !~ /cu$opt{c}/ );
    }
    if ( $opt{a} ) { 
      print "\ncluster $cu:\n";
      $format_str = "%-" . $max_name_len . "s %10s %8s %8s %8s %16s\n";
      printf ($format_str, "Test", "Total", "Passed", "Failed", "Unknown", "Avg. Run Time");
      printf ($format_str, "=================", "======", "======", "======", "======", "=============");
    } else {
      print "\n    segment: $cu\n";
    }
    foreach $kt ( sort( keys(%totalThisTest) ) ) {
      my $realAvg = 0;
        if ( exists $totalThisTest{$kt}{$cu} ) {
            if ( !exists $passed{$kt}{$cu} ) {
                $passed{$kt}{$cu} = 0;
            }
            if ( !exists $undef{$kt}{$cu} ) {
                $undef{$kt}{$cu} = 0;
            }
            if ( !exists $failed{$kt}{$cu} ) {
                $failed{$kt}{$cu} = 0;
            }
            if ( !exists $foobar{$kt}{$cu} ) {
                $foobar{$kt}{$cu} = 0;
            }
            if ( exists $totalRealtime{$kt}{$cu} ) {
              $realAvg = $totalRealtime{$kt}{$cu} / ($passed{$kt}{$cu} + $undef{$kt}{$cu}); 
              $CumTotalTime += $totalRealtime{$kt}{$cu}; # total time for all tests
            }
          if ( $opt{a} ) { 
             $format_str = "%-" . $max_name_len . "s %10d %8d %8d %8d %16.2f\n";
            printf ($format_str, $kt, $totalThisTest{$kt}{$cu}, $passed{$kt}{$cu}, $failed{$kt}{$cu}, ($undef{$kt}{$cu} + $foobar{$kt}{$cu}), $realAvg);
          } else {
            if ( $opt{x} ) {
              printf ("\t%s, [%4.2f, %4.2f, %4.2f]\n", "$kt - total_runs:$totalThisTest{$kt}{$cu}, passed:$passed{$kt}{$cu}, failed:$failed{$kt}{$cu}, undefined:$undef{$kt}{$cu}, incomplete:$foobar{$kt}{$cu}", $minJobtime{$kt}{$cu}, $realAvg, $maxJobtime{$kt}{$cu});
            } else {
              printf ("\t%s, [%4.2f secs]\n", "$kt - total_runs:$totalThisTest{$kt}{$cu}, passed:$passed{$kt}{$cu}, failed:$failed{$kt}{$cu}, undefined:$undef{$kt}{$cu}, incomplete:$foobar{$kt}{$cu}", $realAvg);
            }
          }
        }

        my @new_list = ();
        if ( ($opt{f}) && ( exists $failedTests{$kt}{$cu} ) ) {
            print "\t failing: \n";
            foreach $val ( @{ $failedTests{$kt}{$cu} } ) {
                $val = "\t $val\n";
                # crate a new list to be sorted by time
                push @new_list, $val;
            }
            my @new_sorted_list = sort { substr($a, -26) cmp substr($b, -26)  } @new_list;
            foreach $sl ( @new_sorted_list) {
                print $sl;
            }
        }

        if ( ($opt{p}) && ( exists $passedTests{$kt}{$cu} ) ) {
            @new_list = ();
            print "\t passing:  \n";
            foreach $val ( @{ $passedTests{$kt}{$cu} } ) {
                $val = "\t $val\n";
                # crate a new list to be sorted by time
                push @new_list, $val;
            }
            my @new_sorted_list = sort { substr($a, -26) cmp substr($b, -26)  } @new_list;
            foreach $sl ( @new_sorted_list) {
                print $sl;
            }
        }
 
        if ($opt{i}) {
          if  ( exists $undefTests{$kt}{$cu} ) {
            @new_list = ();
            print "\t undefined:  \n";
            foreach $val ( @{ $undefTests{$kt}{$cu} } ) {
                $val = "\t $val\n";
                # crate a new list to be sorted by time
                push @new_list, $val;
            }
            my @new_sorted_list = sort { substr($a, -26) cmp substr($b, -26)  } @new_list;
            foreach $sl ( @new_sorted_list) {
                print $sl;
            }
          }
          if  ( exists $foobarTests{$kt}{$cu} ) {
            @new_list = ();
            print "\t incomplete:  \n";
            foreach $val ( @{ $foobarTests{$kt}{$cu} } ) {
                $val = "\t $val\n";
                # crate a new list to be sorted by time
                push @new_list, $val;
            }
            my @new_sorted_list = sort { substr($a, -26) cmp substr($b, -26)  } @new_list;
            foreach $sl ( @new_sorted_list) {
                print $sl;
            }
          }

        }
    }
  }

#  my $tmpCalc = $CumTotalTime/3600;
#  if (( "$opt{t}" eq "" ) && ( !$opt{T} )) {
  if ( !$opt{T} ) {
      print "\n\n";
    if ( $opt{a} ) {
      # combine total of undef and foobar tests for reporting 
      my $other = $totalTestsUndef + $totalTestsfoobar;
      $earliestStart =~ s/T/ /g;
      $latestEnd =~ s/T/ /g;
      print "First test started at: $earliestStart\n";
      print "Job Totals\n";
      print " Passed: $totalTestsPassed\n";
      print " Failed: $totalTestsFailed\n";
      print " Unknown: $other\n";
#      print "Run Times\n";
#      printf (" %s %4.2f hrs.\n", "Cumulative Wall Clock Run Time:", $tmpCalc);
      print "Last test started at: $latestEnd\n";
    } else {
      print " Results: Tests evaluated = $totalTests, Passed = $totalTestsPassed, Failed = $totalTestsFailed, Undefined = $totalTestsUndef, Incomplete = $totalTestsfoobar\n";
    }
  }
  #print "\n  --------------------------------------------------------------------  \n";
} # each group loop

#print "\n";

exit;

sub usage {

    print "\n\n";
    print "usage: $0 \n";
    print "              -h help \n";
#    print "              -a 'Acceptance Testing Mode. Default is Production Test Mode'\n";
    print "              -e 'Analyze logs ending on yyyy-mm-dd, default is today'\n";
    print "              -E 'Analyze logs ending at HH:MM:SS, default is 23:59:59, -e is today if not provided'\n";
    print "              -f 'list log directories of failed tests'\n";
    print "              -i 'list log directories of undefined or incomplete test results'\n";
    print "              -p 'list log directories of passing tests'\n";
    print "              -s 'Analyze logs starting on yyyy-mm-dd, default is last 15 days ago'\n";
    print "              -S 'Analyze logs starting at HH:MM:SS, default is 00:00:00. -s is today if not provided'\n";
    print "              -t 'test_name. Show test_name only. Partial name will work'\n";
    print "              -T 'Show Trend Data values only'\n";
    print "              -u 'list the results for a particular segment name. Exact match necessary'\n";
    print "              -v 'verbose mode'\n";
    print "\n\n";

}
