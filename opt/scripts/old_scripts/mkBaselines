#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

# creates baseline averages of all trenddata 
#
# original author: Craig Idler

use File::Basename;
use Sys::Hostname;
our $host = hostname;

use Cwd 'abs_path';
$pwd = dirname( abs_path("$0") );
chomp($pwd);

use Getopt::Std;
our %opt;
$opt{t} = "";
# setup arguments as switches or ones that require strings  
getopts( "tv", \%opt);

my $tn;
my $me = `whoami`;
chomp $me;

# print usage if h option set
if ($opt{h}) { usage(); exit; }

my $today = `date '+%Y-%m-%d'`;
chomp $today;

  my %numVals = ();
  my %tdVal = ();
  my %tdValList = ();
  my %tdUnits = ();
  my %min = ();
  my %max = ();
  my %aggTotal = ();
  my %aggTotalList = ();
  my %maxaggTotal = ();
  my %minaggTotal = ();
  my $testname = "";


  while (<STDIN>) {
    chomp $_;
    next unless /\)/;
print "For input -> $_ \n" if ($opt{v});
    next if ($_ =~ /\*+/);
    my @tmpstr = split( /\) /, $_, 2);
    my $testname = $tmpstr[0];
    $testname =~ s/\t//;
    $tmpstr[1] =~ s/^\s+//; #remove leading spaces
    $tmpstr =~ s/\s+$//; #remove trailing spaces
    my @tdstuff = split( " ", $tmpstr[1]);
    chomp $tdstuff[1];
print "  is '$tdstuff[1]' numeric? \n" if ($opt{v});
    next if ($tdstuff[1] eq '');
    next unless is_numeric($tdstuff[1]);
     #  tdstuff[0] = trend data name,  tdstuff[1] = trend data value
print "  then add - $testname) $tdstuff[0] - $tdstuff[1]\n" if ($opt{v});
if ( $tdstuff[0] =~ /(.+)\+(.+)/ )  {
    $tdstuff[0] = $1;}
    $tdVal{$testname}{$tdstuff[0]} += $tdstuff[1]; 
    push ( @{$tdValList{$testname}{$tdstuff[0]} }, $tdstuff[1]);

    # save max and mins
    if (! defined $min{$testname}{$tdstuff[0]}) {
        $min{$testname}{$tdstuff[0]} = $tdstuff[1];
    } else {
      if ($min{$testname}{$tdstuff[0]} > $tdstuff[1]) {
        $min{$testname}{$tdstuff[0]} = $tdstuff[1]; 
      }
    }
    if (! defined $max{$testname}{$tdstuff[0]}) {
        $max{$testname}{$tdstuff[0]} = $tdstuff[1];
    } else {
      if ($max{$testname}{$tdstuff[0]} < $tdstuff[1]) {
        $max{$testname}{$tdstuff[0]} = $tdstuff[1]; 
      }
    }

    $tdUnits{$testname}{$tdstuff[0]} = $tdstuff[2] unless ( $tdstuff[2] eq ""); 
    if (exists $numVals{$testname}{$tdstuff[0]}) { 
      $numVals{$testname}{$tdstuff[0]}++; 
    } else {
      $numVals{$testname}{$tdstuff[0]} = 1; 
    }



# Edited out by cstorer
#    # process the average of a common set of trend data names
#    if ( $tdstuff[0] =~ /(.+)\+(.+)/ )  {
#     chomp $1; # common part before the "+" sign
#     chomp $2; # unique part after the "+" sign
#     #print "com - $1, diff - $2\n";
#     $numVals{$testname}{$1} += 1; 
#     $aggTotal{$testname}{$1} += $tdstuff[1];  
#     push ( @{$aggTotalList{$testname}{$1} }, $tdstuff[1]);
#
#
#     if (! defined $minaggTotal{$testname}{$1}) {
#           $minaggTotal{$testname}{$1} = $tdstuff[1];
#     } else {
#       if ($minaggTotal{$testname}{$1} > $tdstuff[1]) {
#           $minaggTotal{$testname}{$1} = $tdstuff[1];
#       }
#     }
#     if (! defined $maxaggTotal{$testname}{$1}) {
#           $maxaggTotal{$testname}{$1} = $tdstuff[1];
#     } else {
#       if ($maxaggTotal{$testname}{$1} < $tdstuff[1]) {
#           $maxaggTotal{$testname}{$1} = $tdstuff[1];
#       }
#     }
#
#    } # end process common aggregate values

  } # end read line

my %MeanFixedName = ();
my %VarFixedName = ();
my %MeanDynName = ();
my %VarDynName = ();
my $avg = 0;
foreach my $tn (sort keys %tdVal) {
    print "$tn):\n";

    # calculate Mean
    while (my ($key, $value) = each %{$tdVal{$tn} } ) {
        my $mean  = $value / $numVals{$tn}{$key};
        #print (" my key, val - $key, $value\n");
        $MeanFixedName{$tn}{$key} = $mean;
        #print "\t $key = $mean $tdUnits{$tn}{$key} (entries - $numVals{$tn}{$key}, min - $min{$tn}{$key}, max - $max{$tn}{$key}, stDev - $stdev)\n";
    }
    while (my ($key, $value) = each %{$aggTotal{$tn} } ) {
      my $avg = $value / $numVals{$tn}{$key};
      $MeanDynName{$tn}{$key} = $avg;
      #print "\t avg_aggregate_$key = $avg (entries - $numVals{$tn}{$key}, min - $minaggTotal{$tn}{$key}, max - $maxaggTotal{$tn}{$key})\n";
    }

    # calc Standard Dev
    foreach my $k (sort keys %{$tdVal{$tn} } ) {
      foreach $val (@{$tdValList{$tn}{$k} }) {
        #print (" my val - $val\n");
        $VarFixedName{$tn}{$k} += (($val - $MeanFixedName{$tn}{$k}) ** 2);  
      }
      $stdev = sqrt( $VarFixedName{$tn}{$k} / $numVals{$tn}{$k});
      #print " Variance - $VarFixedName{$tn}{$k}, stDev - $stdev\n";
      #print "\t $k = $MeanFixedName{$tn}{$k} $tdUnits{$tn}{$k} (entries - $numVals{$tn}{$k}, min - $min{$tn}{$k}, max - $max{$tn}{$k}, stDev - $stdev)\n";
      printf "\t %s = %.2f %s (entries - %d, min - %.2f, max - %.2f, stDev - %.2f\n", $k, $MeanFixedName{$tn}{$k}, $tdUnits{$tn}{$k}, $numVals{$tn}{$k}, $min{$tn}{$k}, $max{$tn}{$k}, $stdev;
      
    }

    foreach my $k (sort keys %{$aggTotal{$tn} } ) {
      foreach $val (@{$aggTotalList{$tn}{$k} }) {
        #print (" my val - $val\n");
        $VarDynName{$tn}{$k} += (($val - $MeanDynName{$tn}{$k}) ** 2);  
      }
      $stdev = sqrt( $VarDynName{$tn}{$k} / $numVals{$tn}{$k});
      #print " Variance - $VarDynName{$tn}{$k}, stDev - $stdev\n";
      #print "\t $k = $MeanDynName{$tn}{$k} $tdUnits{$tn}{$k} (entries - $numVals{$tn}{$k}, min - $min{$tn}{$k}, max - $max{$tn}{$k}, stDev - $stdev)\n";
      #print "\t avg_aggregate_$k = $MeanDynName{$tn}{$k} (entries - $numVals{$tn}{$k}, min - $minaggTotal{$tn}{$k}, max - $maxaggTotal{$tn}{$k}, stDev - $stdev)\n";
      printf "\t avg_aggregate_%s = %.2f (entries - %d, min - %.2f, max - %.2f, stDev - %.2f\n", $k, $MeanDynName{$tn}{$k}, $numVals{$tn}{$k}, $minaggTotal{$tn}{$k}, $maxaggTotal{$tn}{$k}, $stdev;
    }


}

# subroutine that returns true if item is an integer, float, etc.  Works on sci-notation too)
sub is_numeric {
  #print "is_numeric: checking -> $_[0]\n";
no warnings;
use warnings FATAL => 'numeric';
return defined eval { $_[ 0] == 0 };
}

sub usage {

    print "\n\n";
    print "usage: $0 \n";
    print "              -h help \n";
    print "              -v verbose processing info \n";
    print "\n\n";

}
