#!/usr/bin/perl

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

# Does a "mdiag -j -v --format=xml" to get the list of allocated nodes.
#
# Origianl Author, Feb 2007, Ernie Buenafe
# 

use XML::LibXML;
use Getopt::Long;
use Pod::Usage;
use Sys::Hostname;

$| = 1;
#$ENV{'PATH'} = '/bin:/usr/bin/';        # Untaint $PATH

# Untaint $0
if ($0 =~ /^([ &:#-\@\w.]+)$/) { $0 = $1; }
else { die "Bad data, exiting.\n"; }

&GetOptions("help","man","count","running","state=s","user=s");
exit(1) if $Getopt::Long::error;

if ($opt_man) {
    $> = $< = getpwnam("nobody") or getpwnam("nouser") or -2 if $> == 0;
    pod2usage(-verbose => 2);
}
pod2usage(-verbose => 1) if $opt_help;

my $myjobid;
# Any remaining argument is assumed to be a job ID
$mhjobid = shift @ARGV if $#ARGV => 0;

my $destination;
$destination = shift @ARGV if @ARGV;
$destination =~ s/@//;
if ($destination =~ /^([ &:#-\@\w.]+)$/) { $destination = $1; }

my $len_jobid = 5;
my $len_user = 4;
my $len_name = 4;
my $len_shost = 4;
my $len_queue = 5;
my $len_etime = 5;
my $len_stime = 12;
my $len_estate = 5;
my $len_procs = 5;
my $len_wclimit = 9;
my $max_len_name = 15;

my $mm = `which mdiag`;
chomp($mm);
my $MDIAG = "$mm -j -v --format=xml";
$MDIAG = "$MDIAG --host=$destination" if defined $destination;
my $output = `$MDIAG`;
$output =~ s/^\s+//;
$output =~ s/\s+$//;
my $parser = new XML::LibXML();
my $doc = $parser->parse_string($output);
my $root = $doc->getDocumentElement();

foreach my $jobNode ($root->getChildrenByTagName("job")) {
    my %jobAttr;
    my %reqAttr;

    foreach my $attr ($jobNode->attributes()) {
	my $name  = $attr->nodeName;
	my $value = $attr->nodeValue;
	$jobAttr{$name} = $value;
	#print "job: $name $value\n";
    }

    $jobAttr{EState} = "Hold" if defined $jobAttr{Hold};
    next unless $jobAttr{EState} =~ /^Running$/ or !$opt_running;
    next unless lc($jobAttr{EState}) =~ /^$opt_state$/ or !$opt_state;
    next unless $jobAttr{User} =~ /$opt_user/ or !$opt_user;
    next unless $jobAttr{JobID} =~ /$myjobid/ or !$myjobid;

    my @nodes;
    my @reqNodes = $jobNode->getChildrenByTagName("req");
    foreach my $reqNode (@reqNodes) {
	foreach my $attr ($reqNode->attributes()) {
	    my $name  = $attr->nodeName;
	    my $value = $attr->nodeValue;
	    $reqAttr{$name} = $value;
	    #print "req: $name $value\n";
	    #req: AllocPartition ft
	    #req: ReqNodeFeature [cu02]
	}
	my $nodelist = $reqAttr{AllocNodeList};
	$nodelist =~ s/:\d+//g;
	my @list = split ',', $nodelist;
	foreach my $tmp (@list) { push(@nodes, $tmp) if !grep /^$tmp$/, @nodes; }
    }

    my $procs = $jobAttr{ReqProcs};
    my ($ss,$mm,$hh,$DD,$MM,$YY) = localtime($jobAttr{SubmissionTime});
    $MM = $MM + 1;
    my $stime = sprintf "%02d/%02d %02d:%02d:%02d",$MM,$DD,$hh,$mm,$ss;
    my $etime = &ss2hhmm($jobAttr{AWDuration});
    my $estate = lc($jobAttr{EState});
    $estate = lc($jobAttr{Hold}).":hold" if defined $jobAttr{Hold};
    my $shost;
    my $user = $jobAttr{User};
    my $jobid = $jobAttr{JobID};
    my $jname = defined $jobAttr{JobName} ? $jobAttr{JobName} : "none";
    my $queue = defined $jobAttr{Class} ? $jobAttr{Class} : "none";
    my $wclimit = $jobAttr{ReqAWDuration};

#    if (defined $jobAttr{SubmitHost}) {
#	$shost = $jobAttr{SubmitHost};
#    } elsif (defined $jobAttr{SRMJID}) {
#	$shost = (split '\.', $jobAttr{SRMJID})[1];
#    }

    if ($opt_running or $opt_state =~ /running/) {
	push @jobs, "$jobid%$user%$jname%$queue%$etime%@nodes";
    } else {
	push @jobs, "$jobid%$user%$jname%$queue%$estate%$stime%$wclimit%$procs";
    }

    $len_jobid = length($jobid) if length($jobid) > $len_jobid;
    $len_user = length($user) if length($user) > $len_user;
    $len_name = length($jname) if length($jname) > $len_name;
    $len_name = $max_len_name if $len_name > $max_len_name;
    $len_queue = length($queue) if length($queue) > $len_queue;
    $len_etime = length($etime) if length($etime) > $len_etime;
    $len_stime = length($stime) if length($stime) > $len_stime;
    $len_estate = length($estate) if length($estate) > $len_estate;
    $len_procs = length($procs) if length($procs) > $len_procs;
    $len_wclimit = length($wclimit) if length($wclimit) > $len_wclimit;
}

@jobs or exit;
@jobs = sort @jobs;
$len_jobid += 1;
$len_user += 1;
$len_name += 1;
$len_queue += 1;
$len_etime += 1;
$len_stime += 1;
$len_estate += 1;

my $format;
if ($opt_running or $opt_state =~ /running/) {
    $format = "%-${len_jobid}s %-${len_user}s %-${len_name}s %-${len_queue}s %-${len_etime}s";
    printf "$format %s\n","JobID","User","Name","Queue","ETime","Nodes";
    printf "%s  %s  %s  %s  %s  %s\n",'-'x($len_jobid-1),'-'x($len_user-1),'-'x($len_name-1),'-'x($len_queue-1),'-'x($len_etime-1),'-----';
    $format = $opt_count ? "$format %s (%s)\n" : "$format %s\n";
} else {
    $format = "%-${len_jobid}s %-${len_user}s %-${len_name}s %-${len_queue}s %-${len_estate}s %-${len_stime}s %${len_wclimit}s  %${len_procs}s\n";
    printf $format,"JobID","User","Name","Queue","State","SubmissionTime","WallClock","Procs";
    printf "%s  %s  %s  %s  %s  %s  %s  %s\n",'-'x($len_jobid-1),'-'x($len_user-1),'-'x($len_name-1),'-'x($len_queue-1),'-'x($len_estate-1),'-'x($len_stime-1),'-'x$len_wclimit,'-'x$len_procs;
}

foreach my $job (@jobs) {
    my $args;
    if ($opt_running or $opt_state =~ /running/) {
	my ($jobid,$user,$jname,$queue,$etime,$list) = split '%', $job;
	my $len = length($jname);
	substr($jname, $max_len_name-1) = "*" if $len > $max_len_name;
	my @list = sort split ' ', $list;
	my @names;
	foreach my $node (@list) {
	    $node =~ /^((rr|rt|yr)([a-z]|-fe))/;
	    my $cu = $1;
	    $cu = "none" if not defined $cu;
	    $node =~ s/^((rr|rt|yr)([a-z]|-fe))//g;
	    push @names, $cu if !grep /^$cu$/, @names;
	    push @{$cu}, $node;
	}
	my $nodelist;
	my $count = 0;
	foreach my $cu (@names) {
	    my ($list,$cnt) = compress(@{$cu});
	    unless ($cu =~ /none/) { $list = ($cnt > 1) ? "$cu\[$list\]" : "$cu$list"; }
	    $count += $cnt;
	    $nodelist = defined $nodelist ? "$nodelist,$list" : $list;
	}
	$args = '$jobid,$user,$jname,$queue,$etime,$nodelist';
	$args = "$args,$count" if $opt_count;
	printf $format,eval $args;
	foreach my $cu (@names) { undef @{$cu}; };
    } else {
	my ($jobid,$user,$jname,$queue,$state,$stime,$wclimit,$procs) = split '%', $job;
	my $len = length($jname);
	substr($jname, $max_len_name-1) = "*" if $len > $max_len_name;
	$args = '$jobid,$user,$jname,$queue,$state,$stime,$wclimit,$procs';
	printf $format,eval $args;
    }
}

sub compress {
    my @list = @_;
    my $nodelist;
    my $prev = -1;
    my $count = 0;
    my $alist;
    my @nlist;

    foreach my $node (@list) {
	$count++;
	if ($node =~ /^\d+$/) { push @nlist, $node; }
	else { $alist = (not defined $alist) ? $node : "$alist,$node"; }
    }

    @nlist = sort { $a <=> $b; } @nlist;

    foreach my $node (@nlist) {
	my $inode = int($node);
	next if $node eq $prev;		# Skip duplicates

	if (not defined $nodelist) {
	    $nodelist = $node;
	} else {
	    my @list = split ',', $nodelist;
	    my $last = $list[$#list];

	    if ($last =~ /-/) {
		my ($bgn, $end) = split '-', $last;
		if ($inode == $end+1) { $nodelist =~ s/-$end$/-$node/; }
		else { $nodelist = "$nodelist,$node"; }
	    } else {
		if ($inode == $last+1) { $nodelist = "$nodelist-$node"; }
		else { $nodelist = "$nodelist,$node"; }
	    }
	}
	$prev = $inode;
    }

    $nodelist = (defined $nodelist) ? "$nodelist,$alist" : $alist if defined $alist;
    return $nodelist, $count;
}

sub ss2hhmm {
    my $secs = shift @_;
    my $hh = int($secs/3600);
    $secs -= $hh*3600;
    my $mm = int($secs/60);
    return sprintf "%02d:%02d", $hh, $mm;
}

=head1 NAME

=over 4

=item gzjobs - show status of jobs

=head1 SYNOPSIS

=item B<gzjobs [-help] [-man] [-count] [-running] [-state> <B<mystate>>B<] {-user> <B<myuser>>B<]>

=head1 DESCRIPTION

=item Show the status of jobs.  Essentially does a "mdiag -j -v --format=xml" to get information about the jobs and the list of allocated nodes.

=back

=head1 OPTIONS

=over 8

=item B<-h, -help>

Print this command's help message and exit.

=item B<-m, -man>

Print this command's manual page and exit.

=item B<-c, -count>

Append a count of the number of nodes allocated formatted as I<(node_count)>.  Makes sense only when used with B<-running> or B<-state running> options.

=item B<-r, -running>

Show all running jobs.

=item B<-u, -user> <B<myuser>>

Show all jobs for user B<myuser>.

=item B<-s, -state> <B<mystate>>

Show all jobs in given state B<mystate>.  Recognized states are: B<hold, idle, running>.

=head1 EXAMPLES

=item B<gzjobs> <no options>

Show the status of all jobs.

=item B<gzjobs -r>

Show all running jobs.

=item B<gzjobs -r -u joe>

Show all running jobs for user B<joe>.

=item B<gzjobs -s hold -u joe>

Show all jobs for user B<joe> in state B<hold>.

=item B<gzjobs -u joe>

Show the status of all jobs for user B<joe>.

=item B<gzjobs -s hold>

Show all jobs in state B<hold>.

=item B<gzjobs -s running>

Same as B<gzjobs -r>.

=head1 AUTHOR

=item Ernie Buenafe

=back

=cut
