#!/usr/bin/env python
"""Pavilion Cluster Test Harness (main module)"""

#  ###################################################################
#
#  Disclaimer and Notice of Copyright 
#  ==================================
#
#  Copyright (c) 2015, Los Alamos National Security, LLC
#  All rights reserved.
#
#  Copyright 2015. Los Alamos National Security, LLC. 
#  This software was produced under U.S. Government contract 
#  DE-AC52-06NA25396 for Los Alamos National Laboratory (LANL), 
#  which is operated by Los Alamos National Security, LLC for 
#  the U.S. Department of Energy. The U.S. Government has rights 
#  to use, reproduce, and distribute this software.  NEITHER 
#  THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES 
#  ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY 
#  FOR THE USE OF THIS SOFTWARE.  If software is modified to 
#  produce derivative works, such modified software should be 
#  clearly marked, so as not to confuse it with the version 
#  available from LANL.
#
#  Additionally, redistribution and use in source and binary 
#  forms, with or without modification, are permitted provided 
#  that the following conditions are met:
#
#  1. Redistributions of source code must retain the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer. 
#  2. Redistributions in binary form must reproduce the 
#     above copyright notice, this list of conditions 
#     and the following disclaimer in the documentation 
#     and/or other materials provided with the distribution. 
#  3. Neither the name of Los Alamos National Security, LLC, 
#     Los Alamos National Laboratory, LANL, the U.S. Government, 
#     nor the names of its contributors may be used to endorse 
#     or promote products derived from this software without 
#     specific prior written permission.
#   
#  THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC 
#  AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
#  IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR CONTRIBUTORS 
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
#  OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
#  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
#  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
#  OF SUCH DAMAGE.
#
#  ###################################################################

import sys
import os
import getpass
import re

if sys.version_info[0] != 2 or sys.version_info[1] < 7:
    sys.exit("Python 2.7 is required to run Pavilion")

sys.path.append(os.path.join(os.path.dirname(__file__), "./special_pkgs"))
# support creating Python style command line interfaces
import argparse

# support for dynamically loading new features/commands from a "plugins" directory
from yapsy.PluginManager import PluginManager


# initialize and set up the pavilion master log file
me = getpass.getuser()
mlf = "/tmp/" + me + "/pav.log"
# ++ PV_LOG : Master log file
master_log_file = os.getenv('PV_LOG', mlf)
os.environ['PV_LOG'] = master_log_file
try:
    if not os.path.exists(os.path.dirname(master_log_file)):
        os.makedirs(os.path.dirname(master_log_file))
except OSError:
    sys.exit("Error: badly formatted master_log_file value (needs a path), exiting!")

# set up logging
import logging
logger = logging.getLogger('pav')
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# make sure we can write to the master log file
try:
    fh = logging.FileHandler(filename = master_log_file)
except IOError:
    sys.exit("Error: no permission to write to master_log_file, exiting!")


fh.setFormatter(formatter)
logger.addHandler(fh)

logy = logging.getLogger('yapsy')
logy.setLevel(logging.INFO)
logy.addHandler(fh)

# look for modules relative to where this program is located
sys.path.append(os.path.join(os.path.dirname(__file__), "./modules"))


# stub foo sub-command implemented in the main
def foo():
    print "running foo"


# def usage():
#    print __doc__


def print_version():
    setup_file = os.environ['PVINSTALL'] + "/setup.py"
    setup_config_file = open(setup_file, 'r')
    matches = re.findall("'version':\s+'(.+)',", setup_config_file.read(), re.MULTILINE)
    print "\nPavilion Version -> " + matches[0]
    setup_config_file.close()


def main():
    """Main entry point for the test harness."""

    func_map = {}
    
    # construct main input arguments
    parser = argparse.ArgumentParser(prog="pav")
    subparser = parser.add_subparsers(title="commands", help='sub-commands')
    parser.add_argument("-n", "--name", help="specifies the host machine name", action="store", default="")
    parser.add_argument("-m", "--mode", help="specifies the mode", action="append", default=[])
    parser.add_argument("-c", "--custom", help="customize test parameters", action="append", default=[])
    parser.add_argument("-t", "--testname", help="specify test to be run", action="store", default="")
    parser.add_argument("-v", "--verbose", help="provide verbose output", action="store_true")
    #parser_foo = subparser.add_parser('foo', help="foo help message")
    #parser_foo.set_defaults(sub_cmds='foo')

    print_version()
    print "Running from -> %s" % os.environ['PVINSTALL'] + "/PAV"
    print "Logging to -> %s" % master_log_file + "\n"

    # Dynamic support for adding commands...
    # Find and load the sub-commands (plug-ins) and their arguments

    # Build the manager
    plug_man = PluginManager()
    # Inform where to find plug-ins
    # User can add more places to look by setting ENV PV_PLUGIN_DIR
    # ++ PVINSTALL : Installation root of Pavilion (actually set by the user)
    plugin_dir = os.environ['PVINSTALL'] + "/PAV" + "/plugins"
    plugin_places = [plugin_dir]
    # ++ PV_PLUGIN_DIR : Path where Pavilion searches for addition plugins (commands)
    if os.environ.get('PV_PLUGIN_DIR'):
        plugin_places.append(os.environ.get('PV_PLUGIN_DIR'))
    plug_man.setPluginPlaces(plugin_places)
    # Load all the plug-ins
    logger.info('Loading plugins')
    plug_man.collectPlugins()

    # create a hash that maps all sub-commands to their respective function call
    for pluginInfo in plug_man.getAllPlugins():
                    
        try: 
            # let new functions add their own args to the help line
            func = pluginInfo.plugin_object.add_parser_info(subparser)
            # dictionary of function name to object mapping
            func_map[func] = pluginInfo.plugin_object
        except:
            print "Error using add_help_info method for %s" % pluginInfo.plugin_object

    # turn the input arguments into a dictionary
    args = vars(parser.parse_args())
    # record the command line selections
    logger.info('cmd line args: %s' % args)

    # Process sub-commands, most of which should be found
    # in the plug-ins directory.
    print "  Invoke command: -> " + args['sub_cmds']
    if args['sub_cmds'] == 'foo':
        foo()
    else:
        # invoke the cmd method of the object (plugin) that corresponds to
        # the command selected
        getattr(func_map[args['sub_cmds']], 'cmd')(args)


# this gets called if it's run as a script/program
if __name__ == '__main__':
    # pass entire command line to main except for the command name
    sys.exit(main())
